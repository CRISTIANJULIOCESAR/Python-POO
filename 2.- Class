
# Functions, Classes, and Dictionaries

## Functions

A function is a block of code that can be reused multiple times and allows for specific functionalities:

```python
def greet(name):
    """This function receives a name and returns a greeting."""
    message = "Hello, " + name + "! Welcome!"
    return message

# Call the function and get the result
user_name = "John"
greeting = greet(user_name)
print(greeting)
```

## Classes

Classes are the foundation of object-oriented programming (OOP) in Python and allow you to define structures and behaviors for objects.

### Dictionaries

In the previous example, a dictionary was used to store the qualities of a person:

```python
person = {
    "name": "Ana",
    "age": 25,
    "city": "Madrid"
}
```

A class is similar to a dictionary, but it provides better control over the variables and functions for the object being created. Here is a basic example of how to create a class in Python:

```python
class MyClass:
    def __init__(self, parameter1, parameter2):
        # Initializing the attributes
        self.parameter1 = parameter1
        self.parameter2 = parameter2

    # Method of the class
    def method(self):
        print("This is a method of the class!")
```

### Using the Class in Code

```python
# Create an object of the class
object = MyClass("value1", "value2")

# Access the attributes and methods of the object
print(object.parameter1)
print(object.parameter2)
object.method()
```

### Example

```python
class Person:
    def __init__(self, name, age, city):
        # Initializing the attributes
        self.name = name
        self.age = age
        self.city = city

    # Method to simulate the person sleeping
    def sleep(self):
        print(self.name + " is sleeping")

    # Method to simulate the person walking
    def walk(self, distance):
        print(self.name + " has walked " + str(distance) + " km")

# Creating instances of the Person class
person1 = Person("John", "24", "NYC")
person2 = Person("Abigail", "23", "LA")

person2.sleep()
person2.walk(22)
```

## Example Class: Auto

### Creating the Constructor

```python
class Auto:
    def __init__(self, brand, model, year, color):
        # Initializing the attributes
        self.brand = brand
        self.model = model
        self.year = year
        self.color = color
        self.is_on = False  # Initial state of the car, off
```

### Defining Functionalities

```python
# Method to turn on the car
def turn_on(self):
    if not self.is_on:  # If the car is off
        print("The car is now on.")
        self.is_on = True  # Change state to on
    else:
        print("The car is already on.")

# Method to turn off the car
def turn_off(self):
    if self.is_on:  # If the car is on
        print("The car is now off.")
        self.is_on = False  # Change state to off
    else:
        print("The car is already off.")

# Method to get information about the car
def info(self):
    state = "on" if self.is_on else "off"
    return f"Car: {self.brand} {self.model} ({self.year}), Color: {self.color}, State: {state}"
```

### Using the Class and Methods

```python
# Create an object of the class Auto
my_car = Auto("Toyota", "Corolla", 2022, "Blue")

# Interact with the object
print(my_car.info())
my_car.turn_on()
print(my_car.info())
my_car.turn_off()
print(my_car.info())
```

### Complete Code

```python
# Defining the Auto class
class Auto:
    def __init__(self, brand, model, year, color):
        # Initializing the attributes
        self.brand = brand
        self.model = model
        self.year = year
        self.color = color
        self.is_on = False  # Initial state of the car, off

    # Method to turn on the car
    def turn_on(self):
        if not self.is_on:  # If the car is off
            print("The car is now on.")
            self.is_on = True  # Change state to on
        else:
            print("The car is already on.")

    # Method to turn off the car
    def turn_off(self):
        if self.is_on:  # If the car is on
            print("The car is now off.")
            self.is_on = False  # Change state to off
        else:
            print("The car is already off.")

    # Method to get information about the car
    def info(self):
        state = "on" if self.is_on else "off"
        return f"Car: {self.brand} {self.model} ({self.year}), Color: {self.color}, State: {state}"

# Creating an instance of the Auto class
car = Auto("Toyota", "Corolla", 2022, "Blue")

# Printing information about the car
print(car.info())

# Turning the car on and off
car.turn_on()
car.turn_on()
car.turn_off()
car.turn_off()
```
